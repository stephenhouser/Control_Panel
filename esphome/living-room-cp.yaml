# control-panel.yaml - ESPHome configuration for the Control Panel v1
# 
# 2023/07/24 Stephen Houser
substitutions:
  device_name: "living-room-cp"
  friendly_name: "Living Room Control Panel"
  friendly_short: "living_room_cp"
  display_a_sensor: "sensor.living_room_cp_display_a"
  display_b_sensor: "sensor.living_room_cp_display_b"

esphome:
  name: ${device_name}
  friendly_name: ${friendly_name}
  on_boot:
    if:
      condition:
        api.connected:
      then:
        - logger.log: API connected.
        - light.turn_on: 
            id: panel_leds
            red: 0
            green: 1
            blue: 0
        - delay: 1s
        - light.turn_off: panel_leds

esp32:
  board: esp32dev
  framework:
    type: arduino

logger:
  # Enable logger

wifi:
  # WiFi settings are mostly secrets
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  # fast_connect helps with connection to hidden SSID
  fast_connect: True
  # force the network name to be on hidden network
  use_address: ${device_name}.playmates

ota:
  # Enable Over The Air (OTA) updates with password
  password: !secret ota_password

api:
  # Enable Encrypted Home Assistant API
  encryption:
    key: "G+UNlM3nwQwj87nA+e9PllL1n7BNlsvfkPNOTAX8yG0="

# mqtt:
#   # Secret MQTT server parameters
#   broker: !secret mqtt_host
#   username: !secret mqtt_user
#   password: !secret mqtt_password

web_server:
  # Web interface enabled and has local resources (no Internet)
  local: True
  include_internal: True

external_components:
  # use all components from a local folder
  - source:
      type: local
      path: components
    components: [ matrix_keyboard ]

globals:
  - id: led_bright
    type: int
    restore_value: True
    initial_value: '15'

  - id: display_bright
    type: int
    restore_value: True
    initial_value: '1'

time:
  - platform: homeassistant
    id: homeassistant_time

switch:
  # Allow remote restart (from web interface also)
  - platform: restart
    name: "${friendly_name} Restart"

output:
  # Configure GPIO21 as an output to pull it low and enable the rotary encoder
  # Could have just wired this to ground on the PCB, but it's wired to a pin.
  - platform: gpio
    pin: GPIO22
    id: rotarty_encoder_enable

light:
  # The Addressable RGB lights on the control panel. All in one "strip"
  - platform: esp32_rmt_led_strip
    rgb_order: RGB
    pin: GPIO5
    id: panel_leds
    # 13 LEDs in control panel; 6 in display panel
    num_leds: 17
    rmt_channel: 0
    chipset: ws2812
    name: "Panel LEDs"

  # Define light partitions for each panel LED so they are easily referenced
  # in automations and controls.
  # Note the mapping is not [0] above SW0 unfortunately
  - platform: partition
    name: "LED SW0"
    id: led_sw0
    default_transition_length: 0s
    segments:
      - id: panel_leds
        from: 8
        to: 8
  - platform: partition
    name: "LED SW1"
    id: led_sw1
    default_transition_length: 0s
    segments:
      - id: panel_leds
        from: 9
        to: 9
  - platform: partition
    name: "LED SW2"
    id: led_sw2
    default_transition_length: 0s
    segments:
      - id: panel_leds
        from: 10
        to: 10
  - platform: partition
    name: "LED SW3"
    id: led_sw3
    default_transition_length: 0s
    segments:
      - id: panel_leds
        from: 11
        to: 11
  - platform: partition
    name: "LED SW4"
    id: led_sw4
    default_transition_length: 0s
    segments:
      - id: panel_leds
        from: 12
        to: 12
  - platform: partition
    name: "LED SW5"
    id: led_sw5
    default_transition_length: 0s
    segments:
      - id: panel_leds
        from: 7
        to: 7
  - platform: partition
    name: "LED SW6"
    id: led_sw6
    default_transition_length: 0s
    segments:
      - id: panel_leds
        from: 6
        to: 6
  - platform: partition
    name: "LED SW7"
    id: led_sw7
    default_transition_length: 0s
    segments:
      - id: panel_leds
        from: 5
        to: 5
  - platform: partition
    name: "LED SW8"
    id: led_sw8
    default_transition_length: 0s
    segments:
      - id: panel_leds
        from: 4
        to: 4
  - platform: partition
    name: "LED SW9"
    id: led_sw9
    default_transition_length: 0s
    segments:
      - id: panel_leds
        from: 3
        to: 3
  - platform: partition
    name: "LED Encoder"
    id: led_encoder
    default_transition_length: 0s
    segments:
      - id: panel_leds
        from: 2
        to: 2
  - platform: partition
    name: "LED Call"
    id: led_call
    default_transition_length: 0s
    segments:
      - id: panel_leds
        from: 1
        to: 1
  - platform: partition
    name: "LED SWAB"
    id: led_swab
    default_transition_length: 0s
    segments:
      - id: panel_leds
        from: 0
        to: 0
  - platform: partition
    name: "LED D1"
    id: led_d1
    default_transition_length: 0s
    segments:
      - id: panel_leds
        from: 13
        to: 13
  - platform: partition
    name: "LED D2"
    id: led_d2
    default_transition_length: 0s
    segments:
      - id: panel_leds
        from: 14
        to: 14
  - platform: partition
    name: "LED D3"
    id: led_d3
    default_transition_length: 0s
    segments:
      - id: panel_leds
        from: 15
        to: 15
  - platform: partition
    name: "LED Top"
    id: led_top
    default_transition_length: 0s
    segments:
      - id: panel_leds
        from: 16
        to: 16
    effects:
      - pulse:
          name: "Pulse Red"
          min_brightness: 12%
          update_interval: 1s
      - strobe:
          name: "Color Cycle"
          colors:
            - state: true
              brightness: 75%
              red: 100%
              green: 50%
              blue: 50%
              duration: 500ms
            - state: true
              brightness: 75%
              red: 50%
              green: 100%
              blue: 50%
              duration: 500ms
            - state: true
              brightness: 75%
              red: 50%
              green: 50%
              blue: 100%
              duration: 500ms

matrix_keyboard:
  # The matrix toggle switches on the control panel
  id: keyboard
  rows:
    - pin: GPIO12
    - pin: GPIO13
    - pin: GPIO14
  columns:
    - pin: GPIO25
    - pin: GPIO26
    - pin: GPIO27
    - pin: GPIO33
  # The PCB was laid out to make the wires go, so the rows and columns
  # are not really lined up. This mapping maps the switches to sane "keys"
  keymap: "504A123B6789"
  # There are diodes for n-key rollover
  has_diodes: True     

binary_sensor:
  - <<: !include common/status.yaml

  # The red call pushbutton
  - platform: gpio
    name: "Call Button"
    id: call_button
    pin: 
      number: GPIO18
      mode: INPUT_PULLUP
      inverted: True
    on_press:
      - light.turn_on:
          id: led_top
          effect: "Pulse Red"
          red: 1
          green: 0
          blue: 0
    on_release:
      - light.turn_off:
          id: led_top

  # The rotary encoder has a push button
  - platform: gpio
    name: "Rotary Encoder Button"
    id: rotary_encoder_button
    pin: 
      number: GPIO19
      mode: INPUT_PULLUP
      inverted: True

  # The key toggles
  - platform: matrix_keyboard
    keyboard_id: keyboard
    name: "Switch SW0"
    id: sw0
    key: 0
  - platform: matrix_keyboard
    keyboard_id: keyboard
    name: "Switch SW1"
    id: sw1
    key: 1
  - platform: matrix_keyboard
    keyboard_id: keyboard
    name: "Switch SW2"
    id: sw2
    key: 2
  - platform: matrix_keyboard
    keyboard_id: keyboard
    name: "Switch SW3"
    id: sw3
    key: 3
  - platform: matrix_keyboard
    keyboard_id: keyboard
    name: "Switch SW4"
    id: sw4
    key: 4
  - platform: matrix_keyboard
    keyboard_id: keyboard
    name: "Switch SW5"
    id: sw5
    key: 5
  - platform: matrix_keyboard
    keyboard_id: keyboard
    name: "Switch SW6"
    id: sw6
    key: 6
  - platform: matrix_keyboard
    keyboard_id: keyboard
    name: "Switch SW7"
    id: sw7
    key: 7
  - platform: matrix_keyboard
    keyboard_id: keyboard
    name: "Switch SW8"
    id: sw8
    key: 8
  - platform: matrix_keyboard
    keyboard_id: keyboard
    name: "Switch SW9"
    id: sw9
    key: 9
  - platform: matrix_keyboard
    keyboard_id: keyboard
    name: "Switch SWA"
    id: swA
    key: A
    on_press:
      - light.turn_on:
          id: led_d3
          brightness: !lambda return id(led_bright) / 100.0;
          red: 1
          green: 0
          blue: 0
      - light.turn_off:
          id: led_d2
    on_release:
      - light.turn_off:
          id: led_d3
      - light.turn_on:
          id: led_d2
          brightness: !lambda return id(led_bright) / 100.0;
          red: 1
          green: 0
          blue: 0

  - platform: matrix_keyboard
    keyboard_id: keyboard
    name: "Switch SWB"
    id: swB
    key: B
    on_press:
      - light.turn_on:
          id: led_d1
          brightness: !lambda return id(led_bright) / 100.0;
          red: 1
          green: 0
          blue: 0
      - light.turn_off:
          id: led_d2
    on_release:
      - light.turn_off:
          id: led_d1
      - light.turn_on:
          id: led_d2
          brightness: !lambda return id(led_bright) / 100.0;
          red: 1
          green: 0
          blue: 0

display:
  - platform: tm1637
    id: display_a
    clk_pin: GPIO4
    dio_pin: GPIO0
    length: 4
    lambda: |-
      it.set_intensity(id(display_bright));
      const char *val = id(display_a_value).state.c_str();
      if (!val || !strcmp("unavailable", val)) {
        it.printf(0, "----");
      } else if (!strcmp("time", val)) {
        static int time_colon = 0;
        if ((time_colon++ % 2) == 0) {
          it.strftime("%l.%M", id(homeassistant_time).now());
        } else {
          it.strftime("%l%M", id(homeassistant_time).now());
        }
      } else {        
        it.printf(0, "%4s", val);
      }

  - platform: tm1637
    id: display_b
    clk_pin: GPIO4
    dio_pin: GPIO2
    length: 4
    lambda: |-
      it.set_intensity(id(display_bright));
      int d_value = id(display_b_value).state;
      if (d_value == INT_MAX) {
        it.printf(0, "----");
      } else {
        it.printf(0, "%4.1d", d_value);
      }

text_sensor:
  - platform: homeassistant
    id: display_a_value
    name: "Display A Value"
    entity_id: ${display_a_sensor}
  
sensor:
  - <<: !include common/wifi_status.yaml
  - <<: !include common/uptime.yaml

  # Values from HomeAssistant
  #- platform: homeassistant
  #  id: display_a_value
  #  name: "Display A Value"
  #  entity_id: ${display_a_sensor}

  - platform: homeassistant
    id: display_b_value
    name: "Display B Value"
    entity_id: ${display_b_sensor}

  # The rotary encoder rotation
  - platform: rotary_encoder
    name: "Rotary Encoder"
    id: panel_rotary_encoder
    publish_initial_value: True
    pin_a: 
      number: GPIO21
      mode: INPUT_PULLUP
    pin_b: 
      number: GPIO23
      mode: INPUT_PULLUP


# i2s_audio:
#   i2s_lrclk_pin: GPIO17
#   i2s_bclk_pin: GPIO16

# media_player:
#   - platform: i2s_audio
#     name: media player
#     dac_type: external
#     i2s_dout_pin: GPIO15
#     mode: mono
