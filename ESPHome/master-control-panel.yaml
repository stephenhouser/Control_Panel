substitutions:
  device_name: "master-control-panel"
  friendly_name: "Master Control Panel"
  friendly_short: "master_control_panel"

esphome:
  name: ${device_name}
  friendly_name: ${friendly_name}

esp32:
  board: nodemcu-32s

logger:

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  fast_connect: true
  use_address: master-control-panel.playmates

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Master-Control-Panel"
    password: "LIS4G9M1N27b"

captive_portal:
    
ota:
  password: !secret ota_password

api:

mqtt:
  broker: !secret mqtt_host
  username: !secret mqtt_user
  password: !secret mqtt_password

web_server:
  local: true
  
switch:
  - platform: restart
    name: "${friendly_name} Restart"
    
binary_sensor:
  - <<: !include common/status.yaml
  - platform: gpio
    name: "Switch 1"
    pin: 
      number: GPIO15
      mode: INPUT_PULLUP
      inverted: True
  - platform: gpio
    name: "Switch 2"
    pin: 
      number: GPIO2
      mode: INPUT_PULLUP
      inverted: True
  - platform: gpio
    name: "Switch 3"
    pin: 
      number: GPIO0
      mode: INPUT_PULLUP
      inverted: True
  - platform: gpio
    name: "Switch 4"
    pin: 
      number: GPIO4
      mode: INPUT_PULLUP
      inverted: True
  - platform: gpio
    name: "Switch 5"
    pin: 
      number: GPIO16
      mode: INPUT_PULLUP
      inverted: True

  - platform: gpio
    name: "Switch 6"
    pin: 
      number: GPIO17
      mode: INPUT_PULLUP
      inverted: True
  - platform: gpio
    name: "Switch 7"
    pin: 
      number: GPIO5
      mode: INPUT_PULLUP
      inverted: True
  - platform: gpio
    name: "Switch 8"
    pin: 
      number: GPIO18
      mode: INPUT_PULLUP
      inverted: True
  - platform: gpio
    name: "Switch 9"
    pin: 
      number: GPIO19
      mode: INPUT_PULLUP
      inverted: True
  - platform: gpio
    name: "Switch 10"
    pin: 
      number: GPIO21
      mode: INPUT_PULLUP
      inverted: True
  - platform: gpio
    name: "Button 1"
    pin: 
      number: GPIO22
      mode: INPUT_PULLUP
      inverted: True

  - platform: gpio
    name: "Toggle 1"
    id: toggle_1
    pin: 
      number: GPIO33
      mode: INPUT_PULLUP
      inverted: True
  - platform: gpio
    name: "Toggle 2"
    id: toggle_2
    pin: 
      number: GPIO32
      mode: INPUT_PULLUP
      inverted: True

  - platform: gpio
    name: "Rotary Button"
    pin: 
      number: GPIO23
      mode: INPUT_PULLUP
      inverted: True
      
globals:
  - id: step_count
    type: int
    initial_value: "0"
    restore_value: False

  - id: display_status
    type: bool
    restore_value: False
    initial_value: 'true'

number:
  - platform: template
    id: display_intensity 
    name: "Display Intensity (0-7)"
    icon: mdi:brightness-5
    optimistic: true
    initial_value: 6
    min_value: 0
    max_value: 7
    step: 1
    update_interval: 4000ms
    restore_value: False
    on_value:
      then:
        - component.update: left_display
        - component.update: right_display

  - platform: template
    id: right_display_value 
    name: "Right Display Value"
    optimistic: True
    initial_value: 0
    min_value: -999
    max_value: 9999
    step: 1
    restore_value: False
    update_interval: 250ms
    on_value:
      then:
        - component.update: right_display
        - component.update: left_display

select:
  - platform: template
    name: "Display Select"
    id: display_select
    optimistic: true
    options:
      - power
      - hvac
      - temp
      - time
    initial_option: power
    on_value:
      then:
        - component.update: right_display
        - component.update: left_display

time:
- platform: sntp
  id: ha_time

sensor:
  - <<: !include common/wifi_status.yaml
  - <<: !include common/uptime.yaml
  - platform: homeassistant
    id: mains_power
    name: "Mains Energy Use"
    entity_id: sensor.mains

  - platform: homeassistant
    id: boiler_temp
    name: "Boiler Temperature"
    entity_id: sensor.furnace_temperature
  - platform: homeassistant
    id: oil_level
    name: "Heating Oil"
    entity_id: sensor.heating_oil

  - platform: homeassistant
    id: inside_temp
    name: "Inside Temperature"
    entity_id: sensor.kitchen_t
  - platform: homeassistant
    id: outside_temp
    name: "Outside Temperature"
    entity_id: sensor.outside_t

  - platform: binary_sensor_map
    id: group_0
    name: 'Group Map 0'
    type: sum
    channels:
      - binary_sensor: toggle_1
        value: 1
      - binary_sensor: toggle_2
        value: 2
    on_value:
      then:
        - select.set_index:
            id: display_select
            index: !lambda "return id(group_0).state;"

  - platform: rotary_encoder
    name: "Rotary Encoder"
    id: master_control_panel_rotary_encoder
    publish_initial_value: True
    pin_a: 
      number: GPIO25
      mode: INPUT_PULLUP
    pin_b: 
      number: GPIO26
      mode: INPUT_PULLUP
    on_clockwise:
      then:
        - number.increment:
            id: right_display_value
            cycle: False
    on_anticlockwise:
      then:
        - number.decrement:
            id: right_display_value
            cycle: False

display:
  - platform: tm1637
    id: right_display
    clk_pin: GPIO14
    dio_pin: GPIO27
    length: 4
    lambda: |-
      if (id(display_status) == false) {
        it.printf("    ");
      } else {
        it.set_intensity(id(display_intensity).state - 3);
        auto index = id(display_select).active_index();
        if (index.has_value()) {
          switch (index.value()) {
            case 0:
              it.printf(0, "%4.1d", (int)id(mains_power).state);
              break;
            case 1:
              it.printf(0, "%4.1d", (int)id(oil_level).state);
              break;
            case 2:
              it.printf(0, "%4.1d", (int)id(outside_temp).state);
              break;
          }            
        }
      }

  - platform: tm1637
    id: left_display
    clk_pin: GPIO14
    dio_pin: GPIO13
    length: 4
    update_interval: 500ms
    lambda: |-
      if (id(display_status) == false) {
        it.printf("    ");
      } else {
        it.set_intensity(id(display_intensity).state);
        auto index = id(display_select).active_index();
        if (index.has_value()) {
          switch (index.value()) {
            case 0:
              setenv("TZ", "EST5EDT,M3.2.0,M11.1.0", 1);
              tzset();
              static int i = 0;
              if (i == 0) {
                i=1;
                it.strftime("%l.%M", id(ha_time).now());
              }else{
                i=0;
                it.strftime("%l%M", id(ha_time).now());
              }
              break;
            case 1:
              it.printf(0, "%4.1d", (int)id(boiler_temp).state);  
              break;
            case 2:
              it.printf(0, "%4.1d", (int)id(inside_temp).state);
              break;
          }
        }
      }
