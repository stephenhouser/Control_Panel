# control-panel.yaml - ESPHome configuration for the Control Panel v1
# 
# 2023/07/24 Stephen Houser
substitutions:
  device_name: "control-panel-1"
  friendly_name: "Control Panel 1"
  friendly_short: "control_panel_1"

esphome:
  name: ${device_name}
  friendly_name: ${friendly_name}
  includes:
    - control-panel/control-panel.h
  libraries:
    - "FastLED"

esp32:
  board: esp32dev
  framework:
    type: arduino

logger:
  # Enable logger

wifi:
  # WiFi settings are mostly secrets
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  # fast_connect helps with connection to hidden SSID
  fast_connect: true
  # force the network name to be on hidden network
  use_address: ${device-name}.playmates

ota:
  # Enable Over The Air (OTA) updates with password
  password: !secret ota_password

api:
  # Enable Encrypted Home Assistant API
  encryption:
    key: "G+UNlM3nwQwj87nA+e9PllL1n7BNlsvfkPNOTAX8yG0="

mqtt:
  # Secret MQTT server parameters
  broker: !secret mqtt_host
  username: !secret mqtt_user
  password: !secret mqtt_password

web_server:
  # Web interface enabled and has local resources (no Internet)
  local: true
  include_internal: true

switch:
  # Allow remote restart (from web interface also)
  - platform: restart
    name: "${friendly_name} Restart"

output:
  # Configure GPIO21 as an output to pull it low and enable the rotary encoder
  # Could have just wired this to ground on the PCB, but it's wired to a pin.
  - platform: gpio
    pin: GPIO22
    id: rotarty_encoder_enable

  # use all components from a local folder
  - source:
      type: local
      path: components
      components: [ matrix_keyboard ]

custom_component:
  - lambda: |-
      int led_pin = 5, num_leds = 13;
      std::vector<int> row_pins = { 12, 13, 14 };
      std::vector<int> col_pins = { 25, 26, 27, 33 };
      auto cp = new ControlPanel(row_pins, col_pins, led_pin, num_leds);
      return {cp};
    components:
    - id: control_panel

# https://esphome.io/components/light/custom.html
light:
  - platform: custom
    lambda: |-
      ControlPanel *cp = (ControlPanel *)id(control_panel);
      App.register_component(cp);
      return cp->lights;

    lights:
      - name: "SW 1"
      - name: "SW 2"
      - name: "SW 3"
      - name: "SW 4"
      - name: "SW 5"
      - name: "SW 6"
      - name: "SW 7"
      - name: "SW 8"
      - name: "SW 9"
      - name: "SW 10"
      - name: "SW A/B"
      - name: "Call Button"
      - name: "Rotary Encoder"

binary_sensor:
  - <<: !include common/status.yaml

  # The red call pushbutton
  - platform: gpio
    name: "Call Button"
    id: call_button
    pin: 
      number: GPIO18
      mode: INPUT_PULLUP
      inverted: true

  # The rotary encoder has a push button
  - platform: gpio
    name: "Rotary Encoder Button"
    id: rotary_encoder_button
    pin: 
      number: GPIO19
      mode: INPUT_PULLUP
      inverted: true

  # https://esphome.io/components/binary_sensor/custom.html
  - platform: custom
    lambda: |-
      ControlPanel *cp = (ControlPanel *)id(control_panel);
      App.register_component(cp);
      return cp->keys;

    binary_sensors:
      - name: "SW 1"
      - name: "SW 2"
      - name: "SW 3"
      - name: "SW 4"
      - name: "SW 5"
      - name: "SW 6"
      - name: "SW 7"
      - name: "SW 8"
      - name: "SW 9"
      - name: "SW 10"
      - name: "SW A"
      - name: "SW B"

sensor:
  - <<: !include common/wifi_status.yaml

  - <<: !include common/uptime.yaml

  # The rotary encoder rotation
  - platform: rotary_encoder
    name: "Rotary Encoder"
    id: panel_encoder
    publish_initial_value: True
    pin_a: 
      number: GPIO21
      mode: INPUT_PULLUP
    pin_b: 
      number: GPIO23
      mode: INPUT_PULLUP
    # on_clockwise:
    #   then:
    # on_anticlockwise:
    #   then:
