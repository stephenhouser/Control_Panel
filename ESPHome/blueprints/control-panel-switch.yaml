blueprint:
  name: Control Panel Switch
  description: Connect Control Panel switch/LED to a device
  domain: automation
  input:
    led_color:
      name: LED On Color
      description: Panel LED color when device is On
      selector:
        color_rgb:
    sync_color:
      name: LED Sync Color
      description: Panel LED color when device is out of sync with switch
      selector:
        color_rgb:
    led_brightness:
      name: LED Brightness
      description: Brightness of Panel LED when On
      selector:
        number:
          max: 0
          min: 256
    panel_led:
      name: Panel LED
      description: Panel LED that reflects status of the device and switch
      selector:
        entity:
          domain: light
    panel_switch:
      name: Panel Switch
      description: Panel switch that will control the device
      selector:
        entity:
          domain: binary_sensor
    target_device:
      name: Target Device
      description: Target device to be controlled and synchronized with
      selector:
        entity:

trigger:
  - platform: state
    entity_id:
      - !input target_device
      - !input panel_switch

action:
  - variables:
      var_panel_switch: !input panel_switch
      var_target_device: !input target_device
  - choose:
      - conditions:
          # both are off, turn off LED
          - '{{ is_state(var_target_device, ''off'') }}'
          - '{{ is_state(var_panel_switch, ''off'') }}'
        sequence:
          - service: light.turn_off
            target:
              entity_id: !input panel_led
      - conditions:
          # both are on, turn on LED
          - '{{ is_state(var_target_device, ''on'') }}'
          - '{{ is_state(var_panel_switch, ''on'') }}'
        sequence:
          - service: light.turn_on
            target:
              entity_id: !input panel_led
            data:
              brightness: !input led_brightness
              rgb_color: !input led_color
      - conditions:
          # switch turned on while device is off
          # turn on device
          - '{{ trigger.entity_id == var_panel_switch }}'
          - '{{ trigger.to_state.state == ''on''}}'
          - '{{ is_state(var_target_device, ''off'') }}'
        sequence:
          - service: light.turn_on
            target:
              entity_id: !input panel_led
            data:
              brightness: !input led_brightness
              rgb_color: !input sync_color
          - service: homeassistant.turn_on
            target:
              entity_id: !input target_device
      - conditions:
          # device turned on switch is off
          - '{{ trigger.entity_id == var_target_device }}'
          - '{{ trigger.to_state.state == ''on''}}'
          - '{{ is_state(var_panel_switch, ''off'') }}'
        sequence:
          - service: light.turn_on
            target:
              entity_id: !input panel_led
            data:
              brightness: !input led_brightness
              rgb_color: !input sync_color
      - conditions:
          # switch turned off device is off
          # turn off device
          - '{{ trigger.entity_id == var_panel_switch }}'
          - '{{ trigger.to_state.state == ''off''}}'
          - '{{ is_state(var_target_device, ''on'') }}'
        sequence:
          - service: light.turn_on
            target:
              entity_id: !input panel_led
            data:
              brightness: !input led_brightness
              rgb_color: !input sync_color
          - service: homeassistant.turn_off
            target:
              entity_id: !input target_device
      - conditions:
          # device turned off switch is on
          - '{{ trigger.entity_id == var_target_device }}'
          - '{{ trigger.to_state.state == ''off''}}'
          - '{{ is_state(var_panel_switch, ''on'') }}'
        sequence:
          - service: light.turn_on
            target:
              entity_id: !input panel_led
            data:
              brightness: !input led_brightness
              rgb_color: !input sync_color

mode: parallel
max: 2
